--returning number of clients in database
CREATE PROCEDURE NR_OF_CLIENTS
AS
BEGIN 
	DECLARE @N INT;
	SELECT @N = COUNT(*) FROM CLIENTS;
	RETURN @N;
END;


--increasing prices that have lower rent price than given as a parameter by 10% and printing how many rows were updated 
CREATE PROCEDURE PRICES
@RPRICE MONEY
AS
DECLARE CR CURSOR FOR SELECT ID_CAR, ISNULL(RENT_PRICE, 0) FROM CAR WHERE RENT_PRICE<@RPRICE;
DECLARE @IDC INT, @RP MONEY, @HOWMANY INT
BEGIN
	SET @HOWMANY=0;
	OPEN CR
	FETCH NEXT FROM CR INTO @IDC, @RP
	WHILE @@FETCH_STATUS = 0
		BEGIN
			UPDATE CAR SET RENT_PRICE=@RP*1.1 WHERE ID_CAR=@IDC;
			SET @HOWMANY = @HOWMANY+@@ROWCOUNT;
			FETCH NEXT FROM CR INTO @IDC, @RP;
		END;
	CLOSE CR;
	DEALLOCATE CR;
	PRINT(CAST(@HOWMANY AS VARCHAR)+' PRICES UPDATED');
END;


--showing number of mechanics from given base and salary higher than given number in output parameter
CREATE PROCEDURE MECHANICS_FROM_BASE 
@BASE INT,
@SALARY MONEY,
@MECHANIC INT OUTPUT
AS
BEGIN
	SET @MECHANIC=0;
	SELECT @MECHANIC=COUNT(*) FROM MECHANICS WHERE ID_BASE=@BASE AND SALARY>@SALARY;
END;


--showing orders not older than given date as a result set
CREATE PROCEDURE GET_ORDERS
@FROMDATE DATE
AS
SELECT * FROM ORDERS WHERE ORDER_DATE>@FROMDATE;


--changing category's name
CREATE PROCEDURE CHANGE_CAT
@OLD_C VARCHAR(50),
@NEW_CAT VARCHAR(50) 
AS
DECLARE CUR CURSOR FOR SELECT ID_CAR FROM CAR WHERE C_CATEGORY=@OLD_C;
DECLARE @ID_C INT;
DECLARE @N VARCHAR;
BEGIN
	OPEN CUR
	FETCH NEXT FROM CUR INTO @ID_C;
	WHILE @@FETCH_STATUS=0
		BEGIN
			UPDATE CAR SET C_CATEGORY=@NEW_CAT WHERE ID_CAR=@ID_C;
			FETCH NEXT FROM CUR INTO @ID_C;
		END;
	CLOSE CUR;
	DEALLOCATE CUR;
END;